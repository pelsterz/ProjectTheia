// Generated by gencpp from file interpreter/i2c.msg
// DO NOT EDIT!


#ifndef INTERPRETER_MESSAGE_I2C_H
#define INTERPRETER_MESSAGE_I2C_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace interpreter
{
template <class ContainerAllocator>
struct i2c_
{
  typedef i2c_<ContainerAllocator> Type;

  i2c_()
    : header()
    , action(0)
    , address(0)
    , register(0)
    , bit_start(0)
    , length(0)
    , value()  {
    }
  i2c_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action(0)
    , address(0)
    , register(0)
    , bit_start(0)
    , length(0)
    , value(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _action_type;
  _action_type action;

   typedef uint8_t _address_type;
  _address_type address;

   typedef uint8_t _register_type;
  _register_type register;

   typedef uint8_t _bit_start_type;
  _bit_start_type bit_start;

   typedef uint8_t _length_type;
  _length_type length;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::interpreter::i2c_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interpreter::i2c_<ContainerAllocator> const> ConstPtr;

}; // struct i2c_

typedef ::interpreter::i2c_<std::allocator<void> > i2c;

typedef boost::shared_ptr< ::interpreter::i2c > i2cPtr;
typedef boost::shared_ptr< ::interpreter::i2c const> i2cConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interpreter::i2c_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interpreter::i2c_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interpreter

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'interpreter': ['/home/ubuntu/project_theia/ws/src/interpreter/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interpreter::i2c_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interpreter::i2c_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interpreter::i2c_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interpreter::i2c_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interpreter::i2c_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interpreter::i2c_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interpreter::i2c_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02bbf66b000fb349dca73007c00d3fea";
  }

  static const char* value(const ::interpreter::i2c_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02bbf66b000fb349ULL;
  static const uint64_t static_value2 = 0xdca73007c00d3feaULL;
};

template<class ContainerAllocator>
struct DataType< ::interpreter::i2c_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interpreter/i2c";
  }

  static const char* value(const ::interpreter::i2c_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interpreter::i2c_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 action\n"
"uint8 address\n"
"uint8 register\n"
"uint8 bit_start\n"
"uint8 length\n"
"uint8[] value\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::interpreter::i2c_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interpreter::i2c_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action);
      stream.next(m.address);
      stream.next(m.register);
      stream.next(m.bit_start);
      stream.next(m.length);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct i2c_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interpreter::i2c_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interpreter::i2c_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "register: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.register);
    s << indent << "bit_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bit_start);
    s << indent << "length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERPRETER_MESSAGE_I2C_H
